// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Stack.Infrastructure.Data;

#nullable disable

namespace Stack.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240331183504_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Stack.Domain.Model.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count")
                        .HasAnnotation("Relational:JsonPropertyName", "count");

                    b.Property<bool>("HasSynonyms")
                        .HasColumnType("boolean")
                        .HasColumnName("has_synonyms")
                        .HasAnnotation("Relational:JsonPropertyName", "has_synonyms");

                    b.Property<bool>("IsModeratorOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_moderator_only")
                        .HasAnnotation("Relational:JsonPropertyName", "is_moderator_only");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required")
                        .HasAnnotation("Relational:JsonPropertyName", "is_required");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasAnnotation("Relational:JsonPropertyName", "user_id");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Stack.Domain.Model.Tag", b =>
                {
                    b.OwnsMany("Stack.Domain.Model.Collectives", "Collectives", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description")
                                .HasAnnotation("Relational:JsonPropertyName", "description");

                            b1.Property<string>("Link")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("link")
                                .HasAnnotation("Relational:JsonPropertyName", "link");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name")
                                .HasAnnotation("Relational:JsonPropertyName", "name");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("slug")
                                .HasAnnotation("Relational:JsonPropertyName", " slug");

                            b1.Property<Guid>("TagId")
                                .HasColumnType("uuid")
                                .HasColumnName("tag_id");

                            b1.Property<List<string>>("Tags")
                                .IsRequired()
                                .HasColumnType("text[]")
                                .HasColumnName("tags")
                                .HasAnnotation("Relational:JsonPropertyName", "tags");

                            b1.HasKey("Id")
                                .HasName("pk_collectives");

                            b1.HasIndex("TagId")
                                .HasDatabaseName("ix_collectives_tag_id");

                            b1.ToTable("collectives", (string)null);

                            b1.HasAnnotation("Relational:JsonPropertyName", "collectives ");

                            b1.WithOwner()
                                .HasForeignKey("TagId")
                                .HasConstraintName("fk_collectives_tags_tag_id");

                            b1.OwnsMany("Stack.Domain.Model.CollectiveExternalLink", "ExternalLinks", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<Guid>("CollectiveId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("collective_id");

                                    b2.Property<string>("Link")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("link")
                                        .HasAnnotation("Relational:JsonPropertyName", "link");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("type")
                                        .HasAnnotation("Relational:JsonPropertyName", "type");

                                    b2.HasKey("Id");

                                    b2.HasIndex("CollectiveId")
                                        .HasDatabaseName("ix_collective_external_link_collective_id");

                                    b2.ToTable("collective_external_link", (string)null);

                                    b2.HasAnnotation("Relational:JsonPropertyName", "external_links");

                                    b2.WithOwner()
                                        .HasForeignKey("CollectiveId")
                                        .HasConstraintName("fk_collective_external_link_collectives_collective_id");
                                });

                            b1.Navigation("ExternalLinks");
                        });

                    b.Navigation("Collectives");
                });
#pragma warning restore 612, 618
        }
    }
}
